---
# roles/configure?_app/tasks/main.yml
# Created: 2019-09-15
# cdex-deploy
# Purpose:
#     Run migrate
#     createsuperuser
#    
#    

#- name: install nodejs for SASS/CSS Build
#  become_user: "{{ remote_admin_account }}"
#  become: yes
#  apt:
#    name:
#      - nodejs
#    update_cache: yes
#    state: present

#- name: install npm for SASS/CSS Build via aptitude
#  become_user: "{{ remote_admin_account }}"
#  become: yes
#  shell: "sudo apt-get install -y npm"

#- name: install and configure npm
#  become_user: "{{ remote_admin_account }}"
#  become: yes
#  shell: "cd {{ base_app_directory }}/{{ role_type }} && npm install"

#- name: build assets
#  become_user: "{{ remote_admin_account }}"
#  become: yes
#  shell: "cd {{ base_app_directory }}/{{ role_type }}/assets && make -i -k build"
#  when: role_type == "smh_app"

# switching to django_manage after appending .env to activate script
- name: run django migrate
  django_manage:
    command: migrate
    app_path: "{{ base_app_directory }}/{{ role_type }}"
    virtualenv: "{{ base_app_directory }}/{{ role_type }}/{{ virtual_env_dir }}"
#  shell: "cd {{ base_app_directory }}/{{ role_type }} && . {{ base_app_directory }}/{{ role_type }}/{{ virtual_env_dir }}/bin/activate &&  . {{ base_app_directory }}/{{ role_type }}/.env && python manage.py migrate "


- name: collectstatic
  django_manage:
    command: collectstatic
    app_path: "{{ base_app_directory }}/{{ role_type }}"
    virtualenv: "{{ base_app_directory }}/{{ role_type }}/{{ virtual_env_dir }}"
  register: static_result
  changed_when: '"0 static files" not in static_result.out'

- name: "django create superuser - {{ app_pyapps_user }}"
  django_manage:
    virtualenv: "{{ base_app_directory }}/{{ role_type }}/{{ virtual_env_dir }}"
    app_path: "{{ base_app_directory }}/{{ role_type }}"
    command: "create_super_user_from_envars"
  when: role_type != "smh"
#  shell: "cd {{ base_app_directory }}/{{ role_type }} && . {{ base_app_directory }}/{{ role_type }}/{{ virtual_env_dir }}/bin/activate &&  . {{ base_app_directory }}/{{ role_type }}/.env && python manage.py create_super_user_from_envars "


- name: "install group settings"
  django_manage:
    virtualenv: "{{ base_app_directory }}/{{ role_type }}/{{ virtual_env_dir }}"
    app_path: "{{ base_app_directory }}/{{ role_type }}"
    command: "create_default_groups"
#  shell: "cd {{ base_app_directory }}/{{ role_type }} && . {{ base_app_directory }}/{{ role_type }}/{{ virtual_env_dir }}/bin/activate &&  . {{ base_app_directory }}/{{ role_type }}/.env && python manage.py create_default_groups "
  when: role_type == "vmi"

- name: "install sample organizations to vmi only"
  django_manage:
    virtualenv: "{{ base_app_directory }}/{{ role_type }}/{{ virtual_env_dir }}"
    app_path: "{{ base_app_directory }}/{{ role_type }}"
    command: "create_sample_organizations"
#  shell: "cd {{ base_app_directory }}/{{ role_type }} && . {{ base_app_directory }}/{{ role_type }}/{{ virtual_env_dir }}/bin/activate &&  . {{ base_app_directory }}/{{ role_type }}/.env && python manage.py create_sample_organizations "
  when: role_type == "vmi"



